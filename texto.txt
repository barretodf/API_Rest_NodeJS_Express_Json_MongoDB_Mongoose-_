API REST com NodeJS e mongoDB

*A API será baseada em express para tratar as requisições e enviar as respostas aos endpoints
*Vou usar mongoDB como banco de dados, com a ODM Mongoose;
*Realizarei as operações no mongoDB Atlas;
*O pacote Nodemon vai ajudar a atualizar o código em tempo real da aplicação;~
*A API será testada pelo postman;


***Objetivo***

Criar um API nos padrões RESTful que terá um CRUD;
Os endpoints serão criados com os verbos http que correspondem a ação do mesmo
AS ações serão baseadas em JSON, retornando o status correto
Aplicação de validações simples para simular o mundo real.

***Começando***

npm init -y

*Instalar as dependências*
npm install express nodemon mongoose 
criei o script "start": "nodemon ./index.js localhost 3000"
rodei no terminal com npm start + enter

------------------------------------------------------------------------------------------
*** Aqui eu tenho um app funcionando com uma rota de teste ***

const express = require ('express');
const mongoose = require ('mongoose');
const app = express();

*** Atenção ***

//Depois de fazer o models e Person tenho que chamar ele aqui
const Person = require('./models/Person')


/*-------------------------------------------------------------------------------------------*/

//Ler json middleware

app.use(
    express.urlencoded({
        extended: true
    })
)
app.use(express.json())

/*-----------------------------------------------------------------------------------------------*/

//Rota inicial
app.get('/', async (req, res) => {

    res.json({message: 'Olá express!'})
})

//Escutar em uma porta
app.listen(3000)

/*---------------------------------------------------------------------------------------------*/
***************************
conectando ao banco de dados
******************************

mongoose.connect (colocar a string de conexão do banco de dados com a senha)

.then(() => {
    console.log('Conectamos ao MongoDB!')
    app.listen(3000);
})
.catch((err) => console.log('err'));

-------------------------------------------------------------------------------------------------
***Criar a pasta models (vou trabalhar o banco de dados nele)
vou usar um arquivo com o nome Person - pessoa

Assim:

const mongoose = require('mongoose');

//Vou usar um método do mongoose chamado model e vou colocar o nome do model ('Person')
//Ele vai criar uma colection isso é uma tabela chamada Persons lá no banco.
//Ele sempre vai usar o plural do que eu colocar aqui. Person - Persons
//Depois de person aqui no codigo eu vou criar os campos que ele vai ter. com os tipos primitivos
//Approved é boleano, é a aprovação do usuário no sistema.

const Person = mongoose.model('Person', {
    name: String,
    salary: Number,
    approved: Boolean,

})


*** Atenção ***
//Exportar ele para ser utilizado em outro lugar
//Resgatar ele no Index.js que é meu app

//const Person = require('./models/Person');

module.exports = Person;

--------------------------------- Rotas ----------------------------

Agora vou criar minhas rotas, por enquanto no index mesmo

//Post - Rota de criação

app.post('/person', async (req, res) => {
    //req.body
    const {name, salary, approved} = req.body

if (!name) {
    res.status(422).json({error: 'O nome é obrigatório!'})
}

const person = {
    name,
    salary,
    approved
}
//Create
try {
    //Criando dados
    await Person.create(person)
    res.status(201).json({message: 'Pessoa inserida com sucesso!'})

} catch (error) {
    res.status(422).json({error: error})
}
})

-----------------------------------------------------------------------------------------------
****************************
externalizar as rotas da API
****************************

Criar uma pasta chamada routes e nela um arquivo personRoutes.js

Nesse arquivo vou chamar o router que é um recurso do express que permite criar
um arquivo de rota e eu exporto na aplicação (index)
No index eu vou recortar a rota e colar nessa router

***Fica assim:

const router = require('express').Router()

const Person = require('../models/Person');

//Depois vem a requisição Post
//Recortar da index e colar aqui em baixo


//No final colocar - module.exports = router;
---------------------------------------------------------------------------------------

Agora vou chamar no index linha 18
//Vou usar midlewares para definir as rotas que vou usar

//Rotas da API

const personRoutes = require('/routes/personRoutes')//Não tem . antes de /


O model ainda não existe la no personRoutes, eu vou cortar e colar lá

Vai dar um erro pq ele não consegue encontrar dentro da pasta que coloquei Agora
vou acrescentar a rota

Na personRoutes linha 2
const Person = require('../models/Person');
*** Apagar o person na rota que está no personRoutes
e mudar de app.post para router.post

Agora vou no postman criar outro usuário na API

/*------------------------------------------------------------------------------------*/

// Ficou assim a personRoutes

const router = require('express').Router()

const Person = require('../models/Person');

//Rota Post = Criar dados
router.post('/', async (req, res) => {
    //req.body
    const {name, salary, approved} = req.body

if (!name) {
    res.status(422).json({error: 'O nome é obrigatório!'})
    return//Não executa mais o programa, Garante que vai parar por aqui
        
}

const person = {
    name,
    salary,
    approved
}
//Create
try {
    //Criando dados
    await Person.create(person)
    res.status(500).json({message: 'Pessoa inserida com sucesso!'})

} catch (error) {
    res.status(422).json({error: error})
}
})

module.exports = router;

---------------------------------------------------------------------------------------

//Ficou assim a Index

//Tudo que vier de /person vai ser direcionado para personRoutes

const personRoutes = require('./routes/personRoutes')
app.use('/person', personRoutes)

---------------------------------------------------------------------------------------
minuto 54:55 

Agora vou criar outra rota GET -  Read - Leitura de dados

Fica assim: 


router.get('/', async (req, res) => {
    try {
        const people = await Person.find()
        res.status(200).json(people)
    } catch (error) {
        res.status(422).json({error: error});
    }
})

Vou no postman criar outra requisição com /person metodo get Buscar Pessoas Todos
------------------------------------------------------------------------------------------
Vou criar uma Rota get Buscar por Index

//Rotas dinâmicas usando o ID

router.get('/:id', async (req, res) => {
    //extrair o dado da requisição pela url = req.params
    
    const id = req.params.id
    try {
        //findOne para buscar só 1
        const person = await Person.findOne({_id: id})

        if(!person) {
            res.status(422).json({message: 'A id digitado não existe!'})
            return//Não executa mais o programa, Garante que vai parar por aqui
        }

        res.status(200).json(person)

    } catch (error) {
        res.status(500).json({error: error});
    }
})

*** Criando uma validação para quando o usuário não é encontrado ***

/*-------------------------------------------------------------------------------------------*/

Até aqui está tudo funcionando!!!

/*-------------------------------------------------------------------------------------------*/

/Rotas dinâmicas usando o ID

router.get('/:id', async (req, res) => {
    //extrair o dado da requisição pela url = req.params
    const id = req.params.id

    try {
        //findOne para buscar só 1
        const person = await Person.findOne({_id: id})

        if(!person) {
            res.status(422).json({message: 'A id digitado não existe!'})
            return//Não executa mais o programa, Garante que vai parar por aqui
        }

        res.status(200).json(person)

    } catch (error) {
        res.status(500).json({error: error});
    }
})

---------------------------------------------------------------------------------------------

//Update - atualização de dados (put - patch)
//Ele vem de forma dinâmica para ser atualizado

router.patch('/:id', async (req, res) => {
    const id = req.params.id
    const {name, salary, approved} = req.body

const person = {
    name,
    salary,
    approved,
}
try {
    const updatedPerson = await Person.updateOne({_id: id}, person)

    console.log(updatedPerson)

    if(updatedPerson.matchedCount === 0) {
        res.status(422).json({msg: 'Pessoa não encontrada!'})
        return
    }

    res.status(200).json(person)
    
} catch (error) {
    res.status(500).json({error: error})
    
}
})

module.exports = router;

/*--------------------------------------------------------------------------------------------*/
***dotenv

instalar o dotenv

npm install dotenv
para proteger senha e usuer

variáveis de ambiente
